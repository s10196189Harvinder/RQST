@using Newtonsoft.Json;
@using GeoJSON.Net.Feature;
@model List<Request_NEW>;
@{
    Layout = "AdminMenu";
}
<!--
CSS doers
infotitle, itemname, itemamnt are css for the windows that pop up when you click on the circle

infotitle - The request count at the top
itemname - styling for the item name
itemamnt - styling for the item amnt
-->
<style>
    #map {
        height: 500px;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .infotitle {
        font-size: 12px;
        font-weight: bold;
        justify-content: center;
    }

    .itemname {
        font-size: 11px;
        font-weight: 500;
    }

    .itemamnt {
        font-size: 11px;
    }
</style>
<link href="~/css/tableDesign.css" rel="stylesheet" />
<link href="~/css/adminpage.css" rel="stylesheet" />
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<h2 style="text-align:center">Order Request</h2>
<div id="map">

</div>
@{
    var text = (System.IO.File.ReadAllText(@"wwwroot\subzones.geojson"));
    <script>
        var json = @Html.Raw(text);
        function hslToHex(h, s, l) {
            l /= 100;
            const a = s * Math.min(l, 1 - l) / 100;
            const f = n => {
                const k = (n + h / 30) % 12;
                const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
                return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
            };
            return `#${f(0)}${f(8)}${f(4)}`;
        }
        let map;
        function initMap() {
            var infowindow = new google.maps.InfoWindow();
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 1.3562033, lng: 103.8281415 },
                zoom: 11,
            })
            map.data.addGeoJson(json);
            map.data.setStyle(function (feature) {
                var requests = feature.getProperty('requests');
                color = 'grey';
                if (requests > 0) {
                    if (requests > 9) {
                        var h = (1 - ((9.9) / 10)) * 240
                        color = hslToHex(h, 100, 50);
                    }
                    else {
                        var h = (1 - ((requests) / 10)) * 240
                        color = hslToHex(h, 100, 50);
                    }
                }
                var weight = requests > 0 ? 2 : 0.3;
                var opacity = requests > 0 ? 0.7 : 0.3
                return {
                    fillColor: color,
                    strokeWeight: weight,
                    fillOpacity: opacity
                };
            });
            map.data.addListener('click', function (event) {
                if (event.feature.getProperty('requests') > 0) {
                    var feat = event.feature;
                    infowindow.setContent(feat.getProperty("itemliststring"));
                    infowindow.setPosition(event.latLng);
                    infowindow.open(map);
                }
            });
            map.data.addListener('mouseover', function (event) {
                if (event.feature.getProperty("requests") > 0) {
                    map.data.revertStyle();
                    map.data.overrideStyle(event.feature, { fillOpacity: 1,strokeWeight:4, fillColor:"red" });
                }
            });
            map.data.addListener('mouseout', function (event) {
                map.data.revertStyle();
            });

        }
    </script>
    <script>
        var objlist = [];
    </script>

    foreach (Request_NEW request in Model)
    {
        string words = "<div class='infotitle'>Total Requests: " + request.ReqList.Count() + "</div></br>Item summary</br>";
        foreach (items item in request.ItemList)
        {
            words += "<span class='itemname'>" + item.Name + "</span> : <span class='itemamnt'>" + item.Requested + "</span></br>";
        }
        <script>
            var obj = {
                name:@Html.Raw("\"" + request.ZoneID + "\""),
                requests:@Html.Raw(request.ReqList.Count()),
                itemliststring:"@Html.Raw(words)"
            };
            objlist.push(obj);
        </script>
    }
    <script>
        window.onload = function () {
            map.data.forEach(function (feature) {
                var SD_NAME = feature.getProperty('Name');
                console.log("SD : "+SD_NAME);
                if (objlist.some(item => item.name == SD_NAME)) {
                    console.log("item : "  + obj.name);
                    var req = objlist.filter(obj => { return obj.name === SD_NAME });
                    feature.setProperty("requests", req[0].requests);
                    feature.setProperty("itemliststring", req[0].itemliststring);
                }
            });
        };
    </script>
}
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3QoucpamS6ylPkzBSJBXmbt5ZH7Np6Jk&callback=initMap">
</script>
